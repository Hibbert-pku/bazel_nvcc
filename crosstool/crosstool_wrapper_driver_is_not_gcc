#!/usr/bin/env python

from argparse import ArgumentParser
from sys import platform as _platform
import os
import subprocess
import re
import sys
import pipes

CPU_COMPILER = ('/usr/bin/g++')
GCC_COMPILER = ('/usr/bin/gcc')
OTHER_COMPILER = ('crosstool/osx_wrapper.sh')
NVCC_PATH = '/usr/local/cuda/bin/nvcc'
GPP_PATH = '/usr/bin/g++'
GCC_HOST_COMPILER_PATH = ('/usr/bin/gcc')
LLVM_HOST_COMPILER_PATH = ('/usr/bin/gcc')
PREFIX_DIR = os.path.dirname(GCC_HOST_COMPILER_PATH)

def Log(s):
  print 'gpus/crosstool: {0}'.format(s)

def GetOptionValue(argv, option):
  parser = ArgumentParser()
  parser.add_argument('-' + option, nargs='*', action='append')
  args, _ = parser.parse_known_args(argv)
  if not args or not vars(args)[option]:
    return []
  else:
    return sum(vars(args)[option], [])

def GetHostCompilerOptions(argv):
  parser = ArgumentParser()
  parser.add_argument('-isystem', nargs='*', action='append')
  parser.add_argument('-iquote', nargs='*', action='append')
  parser.add_argument('--sysroot', nargs=1)
  parser.add_argument('-g', nargs='*', action='append')

  args, _ = parser.parse_known_args(argv)

  opts = ''
  if args.g:
    opts += ' -g' + ' -g'.join(sum(args.g, []))
  if args.sysroot:
    opts += ' --sysroot ' + args.sysroot[0]

  return opts

def GetNvccOptions(argv):
  parser = ArgumentParser()
  parser.add_argument('-nvcc_options', nargs='*', action='append')

  args, _ = parser.parse_known_args(argv)

  if args.nvcc_options:
    return ' '.join(['--'+a for a in sum(args.nvcc_options, [])])
  return ''

def InvokeGpp(argv, log=False):
  host_compiler_options = GetHostCompilerOptions(argv)
  nvcc_compiler_options = GetNvccOptions(argv)
  opt_option = GetOptionValue(argv, 'O')
  f_options = GetOptionValue(argv, 'f')
  f_options = ''.join([' -f' + f for f in f_options])
  include_options = GetOptionValue(argv, 'I')
  out_file = GetOptionValue(argv, 'o')
  depfiles = GetOptionValue(argv, 'MF')
  defines = GetOptionValue(argv, 'D')
  defines = ''.join([' -D' + define for define in defines])
  undefines = GetOptionValue(argv, 'U')
  undefines = ''.join([' -U' + define for define in undefines])
  std_options = GetOptionValue(argv, 'std')
  # currently only c++11 is supported by Cuda 7.0 std argument
  nvcc_allowed_std_options = ["c++11"]
  std_options = ''.join([' -std=' + define
      for define in std_options if define in nvcc_allowed_std_options])

  # The list of source files get passed after the -c option. I don't know of
  # any other reliable way to just get the list of source files to be compiled.
  src_files = GetOptionValue(argv, 'c')
  if len(src_files) == 0:
    return 1
  if len(out_file) != 1:
    return 1
  opt = (' -O3' if (len(opt_option) > 0 and int(opt_option[0]) > 0)
         else ' -g')
  includes = (' -I ' + ' -I '.join(include_options)
              if len(include_options) > 0
              else '')
  # Unfortunately, there are other options that have -c prefix too.
  # So allowing only those look like C/C++ files.
  src_files = [f for f in src_files if
               re.search('\.cpp$|\.cc$|\.c$|\.cxx$|\.C$', f)]
  srcs = ' '.join(src_files)
  out = ' -o ' + out_file[0]
  # "configure" uses the specific format to substitute the following string.
  # If you change it, make sure you modify "configure" as well.
  supported_cuda_compute_capabilities = [ "3.5", "5.2" ]
  nvccopts = ''
  for capability in supported_cuda_compute_capabilities:
    capability = capability.replace('.', '')
  #  nvccopts += r'-gencode=arch=compute_%s,\"code=sm_%s,compute_%s\" ' % (
  #      capability, capability, capability)
  #nvccopts += ' ' + nvcc_compiler_options
  #nvccopts += undefines
  nvccopts += defines
  nvccopts += std_options
  nvccopts += f_options
  nvccopts += " -I/usr/local/include -isystem /include -I../external/googletest -fPIC"
  if _platform != 'darwin':
    nvccopts += " -iquote bazel-out/local_linux-fastbuild/genfiles -iquote bazel-out/local_linux-dbg/genfiles -iquote bazel-out/local_linux-opt/genfiles"
  else:
    nvccopts += " -iquote bazel-out/local_darwin-fastbuild/genfiles -iquote bazel-out/local_darwin-dbg/genfiles -iquote bazel-out/local_darwin-opt/genfiles"
  if depfiles:
    # Generate the dependency file
    depfile = depfiles[0]
    cmd = (GPP_PATH + ' ' + nvccopts +
           ' -I .' +
           includes + ' ' + srcs + ' -M -o ' + depfile)
    if log: Log(cmd)
    exit_status = os.system(cmd)
    if exit_status != 0:
      return exit_status

  cmd = (GPP_PATH + ' ' + nvccopts +
         ' -I .' +
         opt + includes + ' -c ' + srcs + out)

  cmd = 'PATH=' + PREFIX_DIR + ' ' + cmd
  if log: Log(cmd)
  return os.system(cmd)

def InvokeNvcc(argv, log=False):
  host_compiler_options = GetHostCompilerOptions(argv)
  nvcc_compiler_options = GetNvccOptions(argv)
  opt_option = GetOptionValue(argv, 'O')
  m_options = GetOptionValue(argv, 'm')
  m_options = ''.join([' -m' + m for m in m_options if m in ['32', '64']])
  include_options = GetOptionValue(argv, 'I')
  out_file = GetOptionValue(argv, 'o')
  depfiles = GetOptionValue(argv, 'MF')
  defines = GetOptionValue(argv, 'D')
  defines = ''.join([' -D' + define for define in defines])
  undefines = GetOptionValue(argv, 'U')
  undefines = ''.join([' -U' + define for define in undefines])
  std_options = GetOptionValue(argv, 'std')
  # currently only c++11 is supported by Cuda 7.0 std argument
  nvcc_allowed_std_options = ["c++11"]
  std_options = ''.join([' -std=' + define
      for define in std_options if define in nvcc_allowed_std_options])

  # The list of source files get passed after the -c option. I don't know of
  # any other reliable way to just get the list of source files to be compiled.
  src_files = GetOptionValue(argv, 'c')
  if len(src_files) == 0:
    return 1
  if len(out_file) != 1:
    return 1
  opt = (' -O3' if (len(opt_option) > 0 and int(opt_option[0]) > 0)
         else ' -g -G')
  includes = (' -I ' + ' -I '.join(include_options)
              if len(include_options) > 0
              else '')
  # Unfortunately, there are other options that have -c prefix too.
  # So allowing only those look like C/C++ files.
  src_files = [f for f in src_files if
               re.search('\.cpp$|\.cc$|\.c$|\.cxx$|\.C$', f)]
  srcs = ' '.join(src_files)
  out = ' -o ' + out_file[0]
  # "configure" uses the specific format to substitute the following string.
  # If you change it, make sure you modify "configure" as well.
  supported_cuda_compute_capabilities = [ "3.5", "5.2" ]
  nvccopts = ''
  for capability in supported_cuda_compute_capabilities:
    capability = capability.replace('.', '')
  #  nvccopts += r'-gencode=arch=compute_%s,\"code=sm_%s,compute_%s\" ' % (
  #      capability, capability, capability)
  #nvccopts += ' ' + nvcc_compiler_options
  #nvccopts += undefines
  nvccopts += defines
  nvccopts += std_options
  #nvccopts += m_options
  nvccopts += " --disable-warnings -lineinfo -I/usr/local/include -isystem /include"
  if _platform != 'darwin':
    nvccopts += " -Ibazel-out/local_linux-fastbuild/genfiles -Ibazel-out/local_linux-dbg/genfiles -Ibazel-out/local_linux-opt/genfiles"
  else:
    nvccopts += " -Ibazel-out/local_darwin-fastbuild/genfiles -Ibazel-out/local_darwin-dbg/genfiles -Ibazel-out/local_darwin-opt/genfiles"
  if depfiles:
    # Generate the dependency file
    depfile = depfiles[0]
    cmd = (NVCC_PATH + ' ' + nvccopts +
           ' --compiler-options "' + host_compiler_options + '"' +
           ' --compiler-bindir=' + GCC_HOST_COMPILER_PATH +
           ' -I .' +
           ' -x cu ' + includes + ' ' + srcs + ' -M -o ' + depfile)
    if log: Log(cmd)
    exit_status = os.system(cmd)
    if exit_status != 0:
      return exit_status

  cmd = (NVCC_PATH + ' ' + nvccopts +
         ' --compiler-options "' + host_compiler_options + ' -fPIC"' +
         ' --compiler-bindir=' + GCC_HOST_COMPILER_PATH +
         ' -I .' +
         ' -x cu ' + opt + includes + ' -c ' + srcs + out)

  cmd = 'PATH=' + PREFIX_DIR + ' ' + cmd + ' --ftz=true --prec-div=false --prec-sqrt=false --fmad=true --use_fast_math'
  if log: Log(cmd)
  return os.system(cmd)

def main():
  origin_cmd = [flag for flag in sys.argv[1:]]
  origin_flag = 0
  # compile & link protobuf src
  for index, flag in enumerate(origin_cmd):
    if '.o' in flag:
      if 'tools' in flag:
        origin_flag = 1
      if 'tests' in flag:
        origin_flag = 1
      if 'cuda' in flag:
        origin_flag = 1
      if 'util/vlist' in flag:
        origin_flag = 1
      if 'crf' in flag:
        origin_flag = 1
  src_files = GetOptionValue(origin_cmd, 'c')
  if origin_flag == 0:
    if len(src_files) == 0 and _platform == 'darwin':
      origin_cmd.append('-L/usr/local/lib')
      origin_cmd.append('-lglog')
    return subprocess.call([GCC_COMPILER] + origin_cmd)

  # compile
  if len(src_files) != 0:
    # cuda
    is_cuda = GetOptionValue(origin_cmd, 'D')
    for index, flag in enumerate(is_cuda):
      if 'useCUDA' in flag:
        return InvokeNvcc(origin_cmd)
    return InvokeGpp(origin_cmd)

  # link

  com_flag = 0
  for index, flag in enumerate(origin_cmd):
    if 'all_tests' in flag:
      com_flag = 1
      break
  origin_cmd.append('-L/usr/local/lib')
  origin_cmd.append('-lglog')
  if com_flag and _platform == 'darwin':
    origin_cmd.append('-Wl,-rpath,$ORIGIN/../../bin')
    return subprocess.call([OTHER_COMPILER] + origin_cmd)
  else:
    return subprocess.call([CPU_COMPILER] + origin_cmd)

if __name__ == '__main__':
  sys.exit(main())
